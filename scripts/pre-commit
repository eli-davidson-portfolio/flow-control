#!/bin/bash
# pre-commit
#
# Purpose:
#   Git pre-commit hook that runs various checks before allowing a commit.
#   All checks are run in Docker to ensure consistent environment.
#   This script should be symlinked to .git/hooks/pre-commit
#
# Checks performed:
#   1. Code formatting (gofmt)
#   2. Linting (golangci-lint)
#   3. Unit tests
#   4. Generated code is up to date
#   5. Dependency consistency
#
# Skip checks:
#   To skip checks temporarily, use:
#   git commit --no-verify
#   
#   Or set environment variables:
#   SKIP_TESTS=1 git commit
#   SKIP_LINT=1 git commit
#   SKIP_FMT=1 git commit

set -e

# Enable debug output
set -x

# Get the project root directory
ROOT_DIR="$(git rev-parse --show-toplevel)"
cd "$ROOT_DIR"

# Source common functions and variables
source "${ROOT_DIR}/scripts/common/init.sh"

# Configuration
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
STAGED_DOCS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|yaml|json)$' || true)

log_info "Staged Go files: $STAGED_GO_FILES"
log_info "Staged docs: $STAGED_DOCS"

# Helper functions
should_skip() {
    local check="$1"
    local skip_var="SKIP_${check}"
    [[ "${!skip_var}" == "1" ]]
}

# Function to run a check with proper logging
run_check() {
    local name="$1"
    local cmd="$2"
    
    if should_skip "$name"; then
        log_warn "Skipping $name check (SKIP_$name=1)"
        return 0
    fi
    
    log_info "Running $name check..."
    log_info "Command: $cmd"
    if eval "$cmd"; then
        log_info "$name check passed"
        return 0
    else
        log_error "$name check failed"
        return 1
    fi
}

# Check if any Go files are staged
if [[ -z "$STAGED_GO_FILES" && -z "$STAGED_DOCS" ]]; then
    log_info "No Go files or documentation files staged for commit"
    exit 0
fi

# Run formatting check
if [[ -n "$STAGED_GO_FILES" ]]; then
    # First format the files
    docker compose run --rm test sh -c "
        go mod download &&
        go mod tidy &&
        gofmt -s -w .
    "
    # Check if any files were modified
    if ! git diff --quiet; then
        log_error "Code formatting issues found and fixed. Please review and stage the changes."
        exit 1
    fi
fi

# Run linting check
if [[ -n "$STAGED_GO_FILES" ]]; then
    run_check "LINT" "docker compose run --rm test sh -c '
        go mod download &&
        go mod tidy &&
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest &&
        /go/bin/golangci-lint run
    '" || {
        log_error "Linting issues found. Please run: docker compose run --rm test ./scripts/lint.sh"
        exit 1
    }
fi

# Run tests
run_check "TEST" "docker compose run --rm test sh -c '
    go mod download &&
    go mod tidy &&
    go test ./...
'" || {
    log_error "Tests failed. Please run: docker compose run --rm test ./scripts/test.sh"
    exit 1
}

# Run documentation generation if Go files changed
if [[ -n "$STAGED_GO_FILES" ]]; then
    run_check "DOCS" "docker compose run --rm test sh -c '
        go mod download &&
        go mod tidy &&
        go install github.com/swaggo/swag/cmd/swag@latest &&
        /go/bin/swag init -g cmd/flowcontrol/main.go --parseDependency --parseInternal
    '" || {
        log_error "Documentation generation failed. Please run: docker compose run --rm test ./scripts/build.sh"
        exit 1
    }
fi

log_info "All pre-commit checks passed!"
exit 0 