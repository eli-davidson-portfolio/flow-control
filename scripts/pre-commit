#!/bin/bash
# pre-commit
#
# Purpose:
#   Git pre-commit hook that runs various checks before allowing a commit.
#   Ensures code quality standards are met and tests pass before code is committed.
#   This script should be symlinked to .git/hooks/pre-commit
#
# Checks performed:
#   1. Code formatting (gofmt)
#   2. Linting (golangci-lint)
#   3. Unit tests
#   4. Generated code is up to date
#   5. Dependency consistency
#
# Configuration:
#   The hook can be customized using environment variables or by editing
#   the script directly. See individual sections for available options.
#
# Skip checks:
#   To skip checks temporarily, use:
#   git commit --no-verify
#   
#   Or set environment variables:
#   SKIP_TESTS=1 git commit
#   SKIP_LINT=1 git commit
#   SKIP_FMT=1 git commit

set -e

# Source common functions and variables
source "$(dirname "$0")/common/init.sh"

# Configuration
HOOKS_DIR="$(dirname "$0")"
ROOT_DIR="$(git rev-parse --show-toplevel)"
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
STAGED_DOCS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|yaml|json)$' || true)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to check if we should skip a check
should_skip() {
    local check="$1"
    local skip_var="SKIP_${check}"
    [[ "${!skip_var}" == "1" ]]
}

# Function to run a check with proper logging
run_check() {
    local name="$1"
    local cmd="$2"
    
    if should_skip "$name"; then
        log_warn "Skipping $name check (SKIP_$name=1)"
        return 0
    fi
    
    log_info "Running $name check..."
    if eval "$cmd"; then
        log_info "$name check passed"
        return 0
    else
        log_error "$name check failed"
        return 1
    fi
}

# Check if any Go files are staged
if [[ -z "$STAGED_GO_FILES" && -z "$STAGED_DOCS" ]]; then
    log_info "No Go files or documentation files staged for commit"
    exit 0
fi

# Change to root directory
cd "$ROOT_DIR"

# Check dependencies
run_check "DEPS" "go mod tidy && git diff --exit-code go.mod go.sum" || {
    log_error "Dependencies are not up to date. Please commit go.mod and go.sum changes."
    exit 1
}

# Check formatting
if [[ -n "$STAGED_GO_FILES" ]]; then
    run_check "FMT" "./scripts/fmt.sh --check" || {
        log_error "Code formatting issues found. Please run: ./scripts/fmt.sh"
        exit 1
    }
fi

# Run linter
if [[ -n "$STAGED_GO_FILES" ]]; then
    run_check "LINT" "./scripts/lint.sh" || {
        log_error "Linting issues found. Please fix them and try again."
        exit 1
    }
fi

# Run tests
run_check "TESTS" "./scripts/test.sh" || {
    log_error "Tests failed. Please fix them and try again."
    exit 1
}

# Check generated code (e.g., Swagger docs)
if [[ -n "$STAGED_GO_FILES" ]]; then
    run_check "GENERATE" "go generate ./..." || {
        log_error "Generated code is not up to date. Please run: go generate ./..."
        exit 1
    }
fi

# Check documentation links if docs were modified
if [[ -n "$STAGED_DOCS" ]]; then
    run_check "DOCS" "./scripts/check-docs.sh" || {
        log_error "Documentation issues found. Please fix broken links or references."
        exit 1
    }
fi

log_info "All pre-commit checks passed!"
exit 0 